name: Deploy to Amazon ECS
on:
  push:
     branches:
         - master
env:

   AWS_REGION: us-east-1
   ECS_CLUSTER: app_cluster
   CONTAINER_NAME: app
   ECS_SERVICE: app_service
   ECS_TD: .github/workflows/td.json

jobs:
  deploy:
      name: Deploy
      runs-on: ubuntu-latest
      environment: dev
      steps:
        - name: Checkout
          uses: actions/checkout@v1

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v1
          with:
             aws-access-key-id: "AKIAYPN35JCKQ4R3HI4P"
             aws-secret-access-key: "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"
             aws-region: "us-east-1"

        - name: login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build, tag, and push image to Amazon ECR
          id: build-image
          env:
             ECR_REGISTRY: "582899026069.dkr.ecr.us-east-1.amazonaws.com"
             ECR_REPOSITORY: "app_repo"
             IMAGE_TAG: ${{ github.sha }}
          run: |
              docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
              docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
              echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


        - name: Fill in the new image ID in the Amazon ECS task definition
          id: task-def-1
          uses: aws-actions/amazon-ecs-render-task-definition@v1
          with:
             task-definition: task-definition.json
             container-name: ${{ env.CONTAINER_NAME }}
             image: ${{ steps.build-image.outputs.image }}

        - name: Deploy Amazon ECS task definition
          uses: aws-actions/amazon-ecs-deploy-task-definition@v1
          with:
             task-definition: ${{ steps.task-def.outputs.task-definition }}
             service: ${{ env.ECS_SERVICE }}
             cluster: ${{ env.ECS_CLUSTER }}
             wait-for-service-stability: true

